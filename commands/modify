#!/usr/bin/env bash

# commands require running as root
cmn_assert_running_as_root

# Sanity checks - make sure packages we need are installed
check_for_zfs
check_for_ipfw

show_help "Available Commands:
    container
    ---------
    Description:
        Modifies an existing container with the given options.

    Options:
        CPU=            Set new CPU limit
        HDD=            Set new disk limit
        RAM=            Set new RAM limit
        ipv4Whitelist=  Set new ipv4 whitelist

    Examples:
        $(basename "$0") modify container x5jR3nK1 RAM=1G
        $(basename "$0") modify container x5jR3nK1 CPU=1 HDD=20G RAM=1G
        $(basename "$0") modify container x5jR3nK1 ipv4Whitelist="10.0.0.0/16,10.1.0.1"

    partition
    ---------
    Description:
        Modifies an existing partition with the given options.

    Options:
        partitionName=  Set new parition name
        CPU=            Set new CPU limit
        HDD=            Set new disk limit
        RAM=            Set new RAM limit
        ipv4Whitelist=  Set new ipv4 whitelist

    Examples:
        $(basename "$0") modify partition customer1
        $(basename "$0") modify partition customer1 paritionName=cust1 CPU=1 \
        RAM=1G ipv4Whitelist="10.0.0.0/16,10.1.0.1"
        $(basename "$0") modify partition customer2 CPU=1 HDD=20G RAM=1G ipv4Whitelist=clear
"

case "${_SUBCOMMANDS[0]}" in
    defaultRelease)
        # ensure we received right number of args
        if [[ ${#_SUBCOMMANDS[@]} -gt 1 ]]; then
            exit_with_error "Too many arguments received."
        fi

        init_select_default_release
    ;;
    container)
        _maxCpu=''
        _maxHdd=''
        _maxRam=''
        _ipv4Whitelist=''

        # ensure we received right number of args
        if [[ ${#_SUBCOMMANDS[@]} -gt 6 ]]; then
            exit_with_error "Too many arguments received."
        fi

        # loop over the args received, populating the variables
        for i in {2..5}; do
            key="${_SUBCOMMANDS[${i}]%%=*}"
            value="${_SUBCOMMANDS[${i}]#*=}"

            # work out what it was that we received
            case "${key}" in
                CPU)
                    _maxCpu="${value}"
                ;;
                HDD)
                    _maxHdd="${value}"
                ;;
                RAM)
                    _maxRam="${value}"
                ;;
                ipv4Whitelist)
                    if [[ -z "${value}" ]]; then
                        _ipv4Whitelist="clear"
                    else
                        _ipv4Whitelist="${value}"
                    fi
                ;;
                *)
                    if [[ -n "${key}" ]]; then
                        exit_with_error "Invalid option \"${key}\""
                    fi
                ;;
            esac
        done

        # modify the container
        container_modify "${_SUBCOMMANDS[1]}" "${_maxHdd}" "${_maxCpu}" "${_maxRam}" "${_ipv4Whitelist}"
    ;;
    partition)
        _partition_name=''
        _partition_cpu=''
        _partition_hdd=''
        _partition_ram=''
        _partition_ip4whitelist=''

        # ensure we received right number of args
        if [[ ${#_SUBCOMMANDS[@]} -gt 6 ]]; then
            exit_with_error "Too many arguments received."
        fi

        # loop over the args received, populating the variables
        for i in {2..6}; do
            key="${_SUBCOMMANDS[${i}]%%=*}"
            value="${_SUBCOMMANDS[${i}]#*=}"

            # work out what it was that we received
            case "${key}" in
                CPU)
                    _partition_cpu="${value}"
                ;;
                HDD)
                    _partition_hdd="${value}"
                ;;
                RAM)
                    _partition_ram="${value}"
                ;;
                partitionName)
                    _partition_name="${value}"
                ;;
                ipv4Whitelist)
                    if [[ -z "${value}" ]]; then
                        _partition_ip4whitelist="clear"
                    else
                        _partition_ip4whitelist="${value}"
                    fi
                ;;
                *)
                    if [[ -n "${key}" ]]; then
                        exit_with_error "Invalid option \"${key}\""
                    fi
                ;;
            esac
        done

        # modify the partition
        partition_modify "${_SUBCOMMANDS[1]}" "${_partition_name}" "${_partition_hdd}" "${_partition_cpu}" "${_partition_ram}" "${_partition_ip4whitelist}"
    ;;
    *)
        exit_with_error "Unknown modify command '${_SUBCOMMANDS[0]}'"
    ;;
esac
